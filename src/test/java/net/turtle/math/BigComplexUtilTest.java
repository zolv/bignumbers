package net.turtle.math;

import java.math.BigInteger;

import org.junit.Assert;
import org.junit.Test;


public class BigComplexUtilTest {
	private final String multiplyOfFirst1000PrimesString = "678629608419755514953266004896957820972161078160377361970324401521111792080121479864721936071815069425907219215791646774510151130705671056416094404541167439287735488353736963531288441938981088407654256240451529081607242659988552012480001287133802278572298314458227654950008738955663072953766341488209509227159933381319371567666804963833249523370831655778314080604712246344649628072459805028063160913071005795183295590443375991860551286230065601580359306757988823124262933259305966372664091680948986620887898883461227980556352852601733860114246410887151983493540958775872577571329277597701163671587052591794386970584444752423596023268793021595936555282977008138833858707329536639661377014042325817639809356799596347944462538427778375525904007169834445567450156949173690701738594584875536885957881452438269676946038980597530032671949818526703398270502591574889228837327819994695664173214894557366363343168494592437205324652573516528943874382178600874878024643322031797588414862315122048846223291257900756812820806739795819803783834366449110996030165071920678407750230118672657378102915524688059208755108467225277065866103666795739208709483959119145497860116133180335757702319385020561042517429031288526721801002679092058170909635701703382390753126302005323612316630558515594616479515096004453718500060291836932140612551722161051067379805065002788004096547708243964735215852734827632098700684466036892770059458754742495711074949314613079781545359495019757827538184361308856825999513366660884541936335491466045305322353749545362962683762333460252556042583248154845846566948014188971651057314058851019340282646752239847232045463969939303431371658607220786663205842510175297602195433569758123945251755043878718459161595137019904240640962465899496512410906852088532419874383895656303779315512987369934711061777117329635461569528504994783413643047392160871963795694958724055597996525917454740621526108635321204763824742430011606570436994644169759611263012712375861911682673548369764923418748711813157811279361700331599397588282864147719911156923709896847720603482450047076226728760035577410722701184878333100234780537897462936378382079055966277885316116887834607362114802378706815302650083359076798475953780285866955566883261644281750278358349579977889429105626865087038835977930842352223971442123281019745568694318200865586150762549114357677130353514342849892002965601064686292493671204318349298134598116662388818407027989992498970986262856712232401426575229549744739851333516937170071337085705197690437625282926914858257689908846227286051735284322402597283976180484905838486513162987381659809287870592690902387482033879184700359561190209417618607868793293476867624464497838299321267571049753373623085351455438610076341961842557148160442782839736179329056237366708383637405663196770746783100179128651460773512143616414356080816160456447832856222804164147618891013658880373227849181446498052320436905124576367614898030410445386643656246089772967461562154147355201124738052009172637452710027640262529821855681129322547617443299372089380860873141895162966481252930360380537684913059090577224188204179681342669502124011214018434733385892140553307905100266308832521127607403573729242486985024795253305646999864066282626291530104297235324933472771821035277094700384260778312268190937365143307612108901729316774669077441981239149913617114331308200242717771235228048768133852203532299832810943137983635951570";
	private final BigRational multiplyOfFirst1000Primes = new BigRational(this.multiplyOfFirst1000PrimesString + "/"+ this.multiplyOfFirst1000PrimesString);
	private final BigComplex bc = new BigComplex(multiplyOfFirst1000Primes, multiplyOfFirst1000Primes);
	
	@Test
	public void testReduceBigComplex() {
		final BigComplex reduced = BigComplexUtil.reduce(bc);
		Assert.assertEquals(BigInteger.ONE, reduced.getA().getNumerator());
		Assert.assertEquals(BigInteger.ONE, reduced.getA().getDenominator());
		Assert.assertEquals(BigInteger.ONE, reduced.getB().getNumerator());
		Assert.assertEquals(BigInteger.ONE, reduced.getB().getDenominator());
	}
	
	@Test(expected=NullPointerException.class)
	public void testReduceBigComplex_null() {
		BigComplexUtil.reduce(null);
		Assert.fail();
	}

	@Test
	public void testReduceBigComplexInt() {
		{
			final BigComplex reduced = BigComplexUtil.reduce(bc, 1000);
			Assert.assertEquals(BigInteger.ONE, reduced.getA().getNumerator());
			Assert.assertEquals(BigInteger.ONE, reduced.getA().getDenominator());
			Assert.assertEquals(BigInteger.ONE, reduced.getB().getNumerator());
			Assert.assertEquals(BigInteger.ONE, reduced.getB().getDenominator());
		}
		{
			final BigComplex reduced = BigComplexUtil.reduce(bc, 10000);
			Assert.assertEquals(BigInteger.ONE, reduced.getA().getNumerator());
			Assert.assertEquals(BigInteger.ONE, reduced.getA().getDenominator());
			Assert.assertEquals(BigInteger.ONE, reduced.getB().getNumerator());
			Assert.assertEquals(BigInteger.ONE, reduced.getB().getDenominator());
		}
		{
			final BigComplex reduced = BigComplexUtil.reduce(bc, -1);
			Assert.assertEquals(this.multiplyOfFirst1000Primes.getNumerator(), reduced.getA().getNumerator());
			Assert.assertEquals(this.multiplyOfFirst1000Primes.getDenominator(), reduced.getA().getDenominator());
			Assert.assertEquals(this.multiplyOfFirst1000Primes.getNumerator(), reduced.getB().getNumerator());
			Assert.assertEquals(this.multiplyOfFirst1000Primes.getDenominator(), reduced.getB().getDenominator());
		}
	}
	
	@Test(expected=NullPointerException.class)
	public void testReduceBigComplexInt_null_1() {
		BigComplexUtil.reduce(null, 2);
		Assert.fail();
	}
	
	@Test
	public void testToStringNormalized() {
//		Assert.assertEquals("2", BigRationalUtil.toStringNormalized(new BigComplex(new BigRational)));
//		Assert.assertEquals("-2", BigRationalUtil.toStringNormalized(new BigRational("2/-1")));
//		Assert.assertEquals("2/3", BigRationalUtil.toStringNormalized(new BigRational("2", "3")));
//		Assert.assertEquals("-2/3", BigRationalUtil.toStringNormalized(new BigRational("-2", "3")));
//		Assert.assertEquals("-2/3", BigRationalUtil.toStringNormalized(new BigRational("2", "-3")));
//		Assert.assertEquals("2/3", BigRationalUtil.toStringNormalized(new BigRational("-2", "-3")));
}

}
